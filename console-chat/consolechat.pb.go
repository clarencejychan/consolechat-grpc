// Code generated by protoc-gen-go. DO NOT EDIT.
// source: console-chat/consolechat.proto

/*
Package consolechat_grpc is a generated protocol buffer package.

It is generated from these files:
	console-chat/consolechat.proto

It has these top-level messages:
	ConnectRequest
	DisconnectRequest
	UserList
	Message
*/
package consolechat_grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type DisconnectRequest struct {
	User string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
}

func (m *DisconnectRequest) Reset()                    { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string            { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()               {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *DisconnectRequest) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

type UserList struct {
	User []string `protobuf:"bytes,1,rep,name=user" json:"user,omitempty"`
}

func (m *UserList) Reset()                    { *m = UserList{} }
func (m *UserList) String() string            { return proto.CompactTextString(m) }
func (*UserList) ProtoMessage()               {}
func (*UserList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *UserList) GetUser() []string {
	if m != nil {
		return m.User
	}
	return nil
}

type Message struct {
	User  string `protobuf:"bytes,1,opt,name=user" json:"user,omitempty"`
	Speak string `protobuf:"bytes,2,opt,name=speak" json:"speak,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Message) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Message) GetSpeak() string {
	if m != nil {
		return m.Speak
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "consolechat.ConnectRequest")
	proto.RegisterType((*DisconnectRequest)(nil), "consolechat.DisconnectRequest")
	proto.RegisterType((*UserList)(nil), "consolechat.UserList")
	proto.RegisterType((*Message)(nil), "consolechat.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ChatService service

type ChatServiceClient interface {
	// Unary request to connect to the service.
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Bidirectional stream for chatting.
	ConsoleChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Unary request to return users connected.
	ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*UserList, error)
	// Unary request to kill the connection.
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/consolechat.ChatService/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ConsoleChat(ctx context.Context, in *Message, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/consolechat.ChatService/ConsoleChat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ListUsers(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*UserList, error) {
	out := new(UserList)
	err := grpc.Invoke(ctx, "/consolechat.ChatService/ListUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/consolechat.ChatService/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatService service

type ChatServiceServer interface {
	// Unary request to connect to the service.
	Connect(context.Context, *ConnectRequest) (*google_protobuf.Empty, error)
	// Bidirectional stream for chatting.
	ConsoleChat(context.Context, *Message) (*google_protobuf.Empty, error)
	// Unary request to return users connected.
	ListUsers(context.Context, *google_protobuf.Empty) (*UserList, error)
	// Unary request to kill the connection.
	Disconnect(context.Context, *DisconnectRequest) (*google_protobuf.Empty, error)
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolechat.ChatService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ConsoleChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ConsoleChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolechat.ChatService/ConsoleChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ConsoleChat(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolechat.ChatService/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ListUsers(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/consolechat.ChatService/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "consolechat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _ChatService_Connect_Handler,
		},
		{
			MethodName: "ConsoleChat",
			Handler:    _ChatService_ConsoleChat_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _ChatService_ListUsers_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _ChatService_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "console-chat/consolechat.proto",
}

func init() { proto.RegisterFile("console-chat/consolechat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0x69, 0xfd, 0x53, 0x3b, 0x01, 0xd1, 0xa1, 0x4a, 0x49, 0x21, 0x48, 0x11, 0xf4, 0xe2,
	0x06, 0xec, 0x4d, 0xc1, 0x83, 0xa9, 0x37, 0xbd, 0x54, 0xbc, 0x78, 0x4b, 0x97, 0x31, 0x0d, 0xd6,
	0x6c, 0xdc, 0xd9, 0x08, 0x7e, 0x07, 0x3f, 0xb4, 0x6c, 0x12, 0x63, 0x16, 0x0d, 0xbd, 0xcd, 0x9f,
	0xf7, 0x86, 0xf9, 0x3d, 0x08, 0xa4, 0xca, 0x58, 0xad, 0xe9, 0x42, 0xae, 0x62, 0x13, 0xd6, 0x8d,
	0xad, 0x45, 0xae, 0x95, 0x51, 0xe8, 0xb5, 0x46, 0xfe, 0x24, 0x51, 0x2a, 0x59, 0x53, 0x58, 0xae,
	0x96, 0xc5, 0x4b, 0x48, 0x6f, 0xb9, 0xf9, 0xac, 0x94, 0xd3, 0x53, 0xd8, 0x8f, 0x54, 0x96, 0x91,
	0x34, 0x0b, 0x7a, 0x2f, 0x88, 0x0d, 0x22, 0x6c, 0x17, 0x4c, 0x7a, 0xdc, 0x3b, 0xe9, 0x9d, 0x0f,
	0x17, 0x65, 0x3d, 0x3d, 0x83, 0xc3, 0x79, 0xca, 0x72, 0xb3, 0x30, 0x80, 0xbd, 0x27, 0x26, 0x7d,
	0x9f, 0x3a, 0xfb, 0xad, 0x66, 0x3f, 0x83, 0xc1, 0x03, 0x31, 0xc7, 0x09, 0xfd, 0x67, 0xc7, 0x11,
	0xec, 0x70, 0x4e, 0xf1, 0xeb, 0xb8, 0x5f, 0x0e, 0xab, 0xe6, 0xf2, 0xab, 0x0f, 0x5e, 0xb4, 0x8a,
	0xcd, 0x23, 0xe9, 0x8f, 0x54, 0x12, 0xde, 0xc0, 0xa0, 0xfe, 0x19, 0x27, 0xa2, 0x0d, 0xef, 0x92,
	0xf8, 0xc7, 0xa2, 0x22, 0x17, 0x3f, 0xe4, 0xe2, 0xce, 0x92, 0xe3, 0x35, 0x78, 0x51, 0xe5, 0xb2,
	0x57, 0x71, 0xe4, 0xdc, 0xa8, 0xdf, 0xeb, 0x34, 0x5f, 0xc1, 0xd0, 0xd2, 0x59, 0x4a, 0xc6, 0x0e,
	0x91, 0x7f, 0xe4, 0x9c, 0x6c, 0x12, 0x99, 0x03, 0xfc, 0xc6, 0x88, 0x81, 0x23, 0xfa, 0x93, 0x6f,
	0xd7, 0x07, 0xb7, 0xf8, 0x7c, 0xd0, 0x36, 0x26, 0x3a, 0x97, 0xcb, 0xdd, 0x52, 0x33, 0xfb, 0x0e,
	0x00, 0x00, 0xff, 0xff, 0x3b, 0x18, 0x99, 0xee, 0x19, 0x02, 0x00, 0x00,
}
